let e=function(e){let n=e.slice(e.indexOf("?")+1).split("&"),t={};return n.map((e=>{let[n,r]=e.split("=");t[n]=decodeURIComponent(r)})),t}(document.URL);console.log(e);let n="/items/timecodes";var t={data:()=>({media:{src:e.mediafile,focusOnSecond:e.second,controls:!0,height:"240"},times:null}),inject:["system"],mounted(){console.log(this.system),this.loadItems()},methods:{loadItems(){this.system.api.get(`${n}?filter={"mediafile":{"_eq":"${this.media.src}" }}&sort[]=second`).then((e=>{console.log(e),this.times=e.data.data}))},captureTime(){var e=String(player.currentTime).toHHMMSS();if(null!=document.getElementById("inp"+e))return;let t={id:null,mediafile:this.media.src,tempImage:s(player),screenshot:null,second:player.currentTime,timestring:e,description:""};this.times.push(t);const i=r(t.tempImage),o=new FormData;o.append("img",i,i.name);this.system.api.post("/files",o,{headers:{"Content-Type":"multipart/form-data"}}).then((r=>{console.log("file Uploaded. Result:",r),t.screenshot=r.data.data.id,console.log(t),this.system.api.post(n,t).then((function(e){console.log(e)})).then(this.loadItems()).then((()=>{setTimeout((function(){document.getElementById("inp"+e).focus()}),300)}))}))},inputFocused(e,n){document.getElementById("inp"+e.timestring).focus(),player.currentTime=parseInt(e.second)},deleteTimecode(e){this.system.api.delete(n+"/"+e.id).then((e=>{colsole.log(e)}))}}};const r=(e,n)=>{const t=e.split(","),r=t[0].match(/:(.*?);/)[1],s=atob(t[1]);let i=s.length;const o=new Uint8Array(i);for(;i;)o[i-1]=s.charCodeAt(i-1),i-=1;return new File([o],n,{type:r})};function s(e){var n=document.createElement("canvas");return n.width=320,n.height=180,n.getContext("2d").drawImage(e,0,0,n.width,n.height),n.toDataURL("image/jpeg")}function i(e,n,t,r,s,i,o,a,m,d){"boolean"!=typeof o&&(m=a,a=o,o=!1);const c="function"==typeof t?t.options:t;let l;if(e&&e.render&&(c.render=e.render,c.staticRenderFns=e.staticRenderFns,c._compiled=!0,s&&(c.functional=!0)),r&&(c._scopeId=r),i?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),n&&n.call(this,m(e)),e&&e._registeredComponents&&e._registeredComponents.add(i)},c._ssrRegister=l):n&&(l=o?function(e){n.call(this,d(e,this.$root.$options.shadowRoot))}:function(e){n.call(this,a(e))}),l)if(c.functional){const e=c.render;c.render=function(n,t){return l.call(t),e(n,t)}}else{const e=c.beforeCreate;c.beforeCreate=e?[].concat(e,l):[l]}return t}String.prototype.toHHMMSS=function(){var e=parseInt(this,10),n=Math.floor(e/3600),t=Math.floor((e-3600*n)/60),r=e-3600*n-60*t;return n<10&&(n="0"+n),t<10&&(t="0"+t),r<10&&(r="0"+r),n+":"+t+":"+r};const o="undefined"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());function a(e){return(e,n)=>function(e,n){const t=o?n.media||"default":e,r=d[t]||(d[t]={ids:new Set,styles:[]});if(!r.ids.has(e)){r.ids.add(e);let t=n.source;if(n.map&&(t+="\n/*# sourceURL="+n.map.sources[0]+" */",t+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n.map))))+" */"),r.element||(r.element=document.createElement("style"),r.element.type="text/css",n.media&&r.element.setAttribute("media",n.media),void 0===m&&(m=document.head||document.getElementsByTagName("head")[0]),m.appendChild(r.element)),"styleSheet"in r.element)r.styles.push(t),r.element.styleSheet.cssText=r.styles.filter(Boolean).join("\n");else{const e=r.ids.size-1,n=document.createTextNode(t),s=r.element.childNodes;s[e]&&r.element.removeChild(s[e]),s.length?r.element.insertBefore(n,s[e]):r.element.appendChild(n)}}}(e,n)}let m;const d={};const c=t;var l=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("private-view",{attrs:{title:"Разметка медиафала"}},[t("div",{attrs:{id:"wrapper"}},[t("div",{attrs:{id:"contols"}},[t("video",{attrs:{crossorigin:"anonymous",id:"player",src:"/assets/"+e.media.src,controls:e.media.controls,height:e.media.height}}),e._v(" "),t("div",[e._v("\n                Путь к файлу:\n                "),t("input",{directives:[{name:"model",rawName:"v-model",value:e.media.src,expression:"media.src"}],domProps:{value:e.media.src},on:{input:function(n){n.target.composing||e.$set(e.media,"src",n.target.value)}}})]),e._v(" "),t("v-button",{on:{click:e.captureTime}},[e._v("Поставить метку")])],1),e._v(" "),t("div",{attrs:{id:"fragments"}},e._l(e.times,(function(n){return t("form",{key:n.id},[n.screenshot?t("img",{attrs:{src:"/assets/"+n.screenshot,alt:"no image"}}):e._e(),e._v(" "),n.tempImage?t("img",{staticClass:"tempImage",attrs:{src:n.tempImage,alt:"no image"}}):e._e(),e._v(" "),t("a",{attrs:{href:"#"},on:{click:function(t){return e.inputFocused(n,t)}}},[e._v(" "+e._s(n.timestring))]),e._v(" "),t("input",{directives:[{name:"model",rawName:"v-model",value:n.description,expression:"metka.description"}],attrs:{id:"inp"+n.timestring,autofocus:""},domProps:{value:n.description},on:{input:function(t){t.target.composing||e.$set(n,"description",t.target.value)}}}),e._v(" "),t("button",{on:{click:function(t){return e.deleteTimecode(n)}}},[e._v("X")])])})),0)])])};l._withStripped=!0;var p={id:"metka",name:"Разметка медиафайлов",icon:"box",routes:[{path:"/",component:i({render:l,staticRenderFns:[]},(function(e){e&&e("data-v-7bdf5ebc_0",{source:"\n#wrapper{\n    overflow-y:hidden !important; /*Чтобы не появлялась лишняя прокрутка всей страницы*/ \n    width: 100%;\n    height: 100%;\n}\n#controls{\n    display:block;\n    max-width: 360px;\n}\n#fragments{\n    \n    display:block;\n    height:300px;\n    min-width:400px;\n    overflow:auto;\n}\n.tempImage{border: 1px red solid;}\n#fragments form img\n{\n    display: inline-block;\n    width: 240px;\n}\n",map:{version:3,sources:["C:\\Users\\ipetrov\\Documents\\dev\\exampleDirectus\\my-directus-module\\src\\module.vue"],names:[],mappings:";AACA;IACA,4BAAA,EAAA,qDAAA;IACA,WAAA;IACA,YAAA;AACA;AACA;IACA,aAAA;IACA,gBAAA;AACA;AACA;;IAEA,aAAA;IACA,YAAA;IACA,eAAA;IACA,aAAA;AACA;AACA,WAAA,qBAAA,CAAA;AACA;;IAEA,qBAAA;IACA,YAAA;AACA",file:"module.vue",sourcesContent:["    <style type=\"text/css\">\r\n        #wrapper{\r\n            overflow-y:hidden !important; /*Чтобы не появлялась лишняя прокрутка всей страницы*/ \r\n            width: 100%;\r\n            height: 100%;\r\n        }\r\n        #controls{\r\n            display:block;\r\n            max-width: 360px;\r\n        }\r\n        #fragments{\r\n            \r\n            display:block;\r\n            height:300px;\r\n            min-width:400px;\r\n            overflow:auto;\r\n        }\r\n        .tempImage{border: 1px red solid;}\r\n        #fragments form img\r\n        {\r\n            display: inline-block;\r\n            width: 240px;\r\n        }\r\n    </style>\r\n<template>\r\n\t<private-view title=\"Разметка медиафала\">\r\n        <div id=wrapper>\r\n        <div id=contols>\r\n        <video crossorigin = \"anonymous\" \r\n               id = 'player' \r\n               :src = '\"/assets/\"+media.src' \r\n               :controls = 'media.controls'\r\n               :height = \"media.height\"\r\n       ></video>\r\n        \r\n        \r\n            <div>\r\n                Путь к файлу:\r\n                <input v-model='media.src' />\r\n            </div>\r\n            <v-button @click='captureTime'>Поставить метку</v-button>\r\n        </div>\r\n        <div id='fragments'>\r\n            <form v-for='metka in times' :key=\"metka.id\">\r\n                <img \r\n                     :src='\"/assets/\"+metka.screenshot'\r\n                     alt=\"no image\" v-if=\"metka.screenshot\" />\r\n                <img class='tempImage'\r\n                     :src='metka.tempImage'\r\n                     alt=\"no image\" v-if=\"metka.tempImage\" />\r\n\x3c!--                     :src='metka.screenshot'--\x3e\r\n                <a   @click = 'inputFocused(metka, $event)' href='#'> {{ metka.timestring }}</a>\r\n                <input v-model='metka.description' \r\n                       :id = '\"inp\"+metka.timestring' \r\n                       autofocus >\r\n                <button @click=\"deleteTimecode(metka)\">X</button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n\r\n    </private-view>\r\n</template>\r\n\r\n<script>\r\nlet getQuery = getUrlParams(document.URL);\r\nconsole.log(getQuery);\r\n    \r\nlet TAB = '/items/timecodes';\r\nexport default {\r\n    data(){\r\n        return {\r\n            media: { \r\n            src: getQuery.mediafile,\r\n            focusOnSecond: getQuery.second,\r\n            controls:true,\r\n            height:'240'\r\n           },\r\n            times: null,\r\n        }\r\n    },\r\n    inject: ['system'], // эта переменная даёт доступ к волшебному api при помощи которого можно обмениваться информацией с сервером практически бесшовно\r\n    mounted() {\r\n        console.log(this.system);\r\n        this.loadItems();\r\n    },\r\n    methods: {\r\n        loadItems(){\r\n            this.system.api.get(`${TAB}?filter={\"mediafile\":{\"_eq\":\"${this.media.src}\" }}&sort[]=second`).then((res) => {\r\n                console.log(res);\r\n                this.times = res.data.data;\r\n            });\r\n        },\r\n       /**\r\n         * @brief Захватить время из медиафайла и сохранить его в базу данных\r\n         * @return ничего\r\n         */\r\n        captureTime(){\r\n            var timeSt = String(player.currentTime).toHHMMSS();\r\n            if(document.getElementById('inp'+timeSt)!=undefined)return;\r\n            let newTimecode = {\r\n                id:null,\r\n                mediafile: this.media.src,\r\n                tempImage: getScreenShot(player),\r\n                screenshot:null,\r\n                second: player.currentTime,\r\n                timestring: timeSt,\r\n                description:''\r\n            };\r\n            this.times.push(newTimecode);\r\n            /*\r\n            *\r\n            * Загрузка скриншота\r\n            *\r\n            */\r\n            const fileImg = dataURLtoFile(newTimecode.tempImage);\r\n            \r\n            const formData = new FormData();\r\n            formData.append('img',fileImg,fileImg.name);\r\n            const conf = {\r\n                headers: {'Content-Type': 'multipart/form-data'}\r\n            }\r\n            this.system.api.post('/files',formData,conf)\r\n                .then((res)=>{\r\n                    console.log('file Uploaded. Result:',res);\r\n                    // Отправка остальных данных\r\n                    newTimecode.screenshot = res.data.data.id;\r\n                    console.log(newTimecode);\r\n                    this.system.api.post(TAB, newTimecode)\r\n                        .then(function(res){\r\n                            console.log(res);\r\n                        }).then(this.loadItems())\r\n                        .then(()=>{\r\n                            setTimeout(function(){document.getElementById('inp'+timeSt).focus();}, 300); // ждём пока создастся input и переводим на него фокус\r\n                        });\r\n                });\r\n\r\n            \r\n            \r\n            \r\n        },  \r\n         /**\r\n         * @brief Сфокусировать курсор на текстовом поле, \r\n                    когда выбран определённый кадр \r\n                    и перевести кадр на нужную позицию в плеере\r\n         * @return ничего\r\n         */\r\n        inputFocused(metka,e){\r\n            document.getElementById( 'inp'+metka.timestring).focus();\r\n            player.currentTime = parseInt(metka.second);\r\n        },\r\n        deleteTimecode(metka){\r\n            this.system.api.delete(TAB+'/'+metka.id)\r\n            .then((res)=>{ colsole.log(res)});\r\n        }\r\n    },\r\n    \r\n};\r\n/**\r\n*\r\n* Источник: https://gist.github.com/ibreathebsb/a104a9297d5df4c8ae944a4ed149bcf1\r\n*\r\n*/\r\nconst dataURLtoFile = (dataurl, filename) => {\r\n  const arr = dataurl.split(',')\r\n  const mime = arr[0].match(/:(.*?);/)[1]\r\n  const bstr = atob(arr[1])\r\n  let n = bstr.length\r\n  const u8arr = new Uint8Array(n)\r\n  while (n) {\r\n    u8arr[n - 1] = bstr.charCodeAt(n - 1)\r\n    n -= 1 // to make eslint happy\r\n  }\r\n  return new File([u8arr], filename, { type: mime })\r\n}\r\n/**\r\n * @brief Получить параметры из GET запроса (адреса страницы)\r\n * @param [in] search URL-адрес из которого нужно получть параметры \r\n                после знака ? в формате ключ=значение. \r\n                Например, http://example.com?key1=val&key2=val2\r\n * @return Объект с ключами и значениями\r\n */\r\nfunction getUrlParams(search) {\r\n    let hashes = search.slice(search.indexOf('?') + 1).split('&')\r\n    let params = {}\r\n    hashes.map(hash => {\r\n        let [key, val] = hash.split('=')\r\n        params[key] = decodeURIComponent(val)\r\n    })\r\n    return params;\r\n}\r\n    \r\n/**\r\n * @brief Сохранение скриншота из видео\r\n * @param [in] video - id элемента video на странице, из которого требуется взять скриншот\r\n * @return Изображение в виде строки\r\n */\r\nfunction getScreenShot(video){\r\n    var canvas = document.createElement('canvas');\r\n    canvas.width = 160*2;\r\n    canvas.height = 90*2;\r\n    var context = canvas.getContext('2d');\r\n    context.drawImage(video, 0 , 0, canvas.width, canvas.height);\r\n    var dataURI = canvas.toDataURL('image/jpeg');\r\n//    console.log(dataURI);\r\n    return dataURI;\r\n    \r\n}\r\n\r\n/**\r\n * @brief Добавление функции в объект String - преобразование секунд в строку в формате HH:MM:SS, где HH - часы, MM - минуты, SS - секунды\r\n * @return строка со временем в формате HH:MM:SS\r\n */\r\nString.prototype.toHHMMSS = function () {\r\n    var sec_num = parseInt(this, 10); // don't forget the second param\r\n    var hours   = Math.floor(sec_num / 3600);\r\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\r\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\r\n\r\n    if (hours   < 10) {hours   = \"0\"+hours;}\r\n    if (minutes < 10) {minutes = \"0\"+minutes;}\r\n    if (seconds < 10) {seconds = \"0\"+seconds;}\r\n    return hours+':'+minutes+':'+seconds;\r\n}\r\n<\/script>"]},media:void 0})}),c,undefined,false,undefined,!1,a,void 0,void 0)}]};export default p;
